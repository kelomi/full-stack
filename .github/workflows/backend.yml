name: Deploy Backend to EC2

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'

jobs:
  build-and-deploy-backend:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Build backend Docker image
      - name: Build backend image
        run: |
          docker build \
            -t kelomi44/backend-app:${{ github.sha }} \
            -t kelomi44/backend-app:latest \
            -f ./backend/Dockerfile \
            ./backend

      # Step 4: Login to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Step 5: Push Docker images
      - name: Push backend image
        run: |
          docker push kelomi44/backend-app:${{ github.sha }}
          docker push kelomi44/backend-app:latest

      # Step 6: Setup SSH
      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      # Step 7: Create docker-compose file if it doesn't exist
      - name: Create docker-compose file
        run: |
          cat > docker-compose.backend.yml << 'EOL'
          version: '3.8'
          services:
            backend:
              image: kelomi44/backend-app:latest
              container_name: backend-app
              ports:
                - "5000:5000"
              environment:
                - NODE_ENV=production
                - DATABASE_URL=${{ secrets.DATABASE_URL }}
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
                interval: 30s
                timeout: 10s
                retries: 3
          EOL

      # Step 8: Copy docker-compose file
      - name: Copy compose file to EC2
        run: |
          scp -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              docker-compose.backend.yml \
              ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/userapp/

      # Step 9: Deploy to EC2
      - name: Deploy backend
        run: |
          ssh -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -o ServerAliveInterval=30 \
              ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            
            echo "Starting backend deployment..."
            cd /home/userapp
            
            # Create directory if it doesn't exist
            mkdir -p /home/userapp
            
            # Update image tag in compose file
            sed -i "s|kelomi44/backend-app:.*|kelomi44/backend-app:${{ github.sha }}|" docker-compose.backend.yml
            
            # Pull latest image
            docker compose -f docker-compose.backend.yml pull backend
            
            # Deploy with force recreate
            docker compose -f docker-compose.backend.yml up -d --force-recreate
            
            # Wait for container to be healthy
            echo "Waiting for backend to be healthy..."
            sleep 15
            
            # Verify deployment
            docker compose -f docker-compose.backend.yml ps
            
            # Cleanup
            docker image prune -af
            
            echo "âœ… Backend deployment completed successfully!"
          EOF

      # Step 10: Verify deployment
      - name: Verify deployment
        run: |
          echo "Deployment completed. Backend should be available at:"
          echo "http://${{ secrets.EC2_HOST }}:5000"